summary(training$Superplasticizer)
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
name(training)
names(training)
sub_training <- training[, c(58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69)]
names(sub_training)
preProc <- preProcess(sub_training, method = "pca", pcaComp=2)
PC <- predict(preProc, sub_training)
plot(PC[,1], PC[,2])
head(sub_training)
head(training$diagnosis)
sub_training<- training[, c(1, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69)]
preProc <- preProcess(sub_training, method = "pca", pcaComp=2)
> PC <- predict(preProc, sub_training)
PC <- predict(preProc, sub_training)
clear
sub_training <- training[, c(58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69)]
preProc <- preProcess(sub_training, method = "pca", pcaComp=2)
PC <- predict(preProc, sub_training)
head(PC)
pc
PC
preProc <- preProcess(sub_training, method = "pca", pcaComp=7)
PC <- predict(preProc, sub_training)
variance(PC)
var(PC)
help(caret)
help(preProcess)
preProc <- preProcess(sub_training, method = "pca", thresh=0.8)
PC <- predict(preProc, sub_training)
names(preProc)
preProc$thresh
preProc$pcaComp
preProc$numComp
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
head(training)
names(training)
sub_training <- training[,c(58,59,60,61,62,63,64,65,66,67,68,69)]
sub_training <- training[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
modelFit1 <- train(sub_training$diagnosis~.,method="glm",data=sub_training)
help(train)
help(e1071)
install.packages("e1071")
modelFit1 <- train(sub_training$diagnosis~.,method="glm",data=sub_training)
preProc <- preProcess(sub_training, method = "pca", thresh=0.8)
modleFit1
modelFit1
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
head(adData)
names(adData)
df <- adData[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
inTrain <- createDataPartition(df$diagnosis, p=3/4)[[1]]
training <- df[inTrain, ]
testing <- df[-inTrain, ]
modelFit1 <- train(diagnosis ~ ., method = "glm", data = training)
prediction1 <- predict(modelFit1, newdata=testing)
C1 <- confusionMatrix(predictions, testing$diagnosis)
C1 <- confusionMatrix(prediction1, testing$diagnosis)
C1
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis, predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[inTrain, ]
testing = adData[-inTrain, ]
df <- adData[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
inTrain <- createDataPartition(df$diagnosis, p=0.75)[[1]]
training <- df[inTrain,]
testing <- df[-inTrain,]
ModelFit1 <- train(diagnosis~.,method = "glm", training)
Prediction1 <- predict(ModelFit1, testing)
C1 <- confusionMatrix(Prediction1, testing$diagnosis)
C1
modelFit2 <- train(training$diagnosis~.,method = "glm", preProcess="pca",data=training,trControl=trainControl(preProcOptions=list(thresh=0.8)))
C2 <- confusionMatrix(testing$diagnosis,predict(ModelFit2, testing))
C2 <- confusionMatrix(testing$diagnosis,predict(modelFit2, testing))
C2
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(3433)
## grep the predictors starting with 'IL'
IL_str <- grep("^IL", colnames(training), value = TRUE)
## make a subset of these predictors
predictors_IL <- predictors[, IL_str]
df <- data.frame(diagnosis, predictors_IL)
inTrain = createDataPartition(df$diagnosis, p = 3/4)[[1]]
training = df[inTrain, ]
testing = df[-inTrain, ]
## train the data using the first method
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
head(testing)
head(training)
training1 <- training
set.seed(3433)
df <- adData[,c(1,58,59,60,61,62,63,64,65,66,67,68,69)]
inTrain <- createDataPartition(df$diagnosis,p=3/4)[[1]]
training <- df[inTrain,]
testing <- df[-inTrain,]
head(training)
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
## get the confustion matrix for the first method
C1 <- confusionMatrix(predictions, testing$diagnosis)
print(C1)
prediction1 <- predict(modelFit, testing)
C1_1 <- confusionMatrix(prediction1,testing$diagnosis)
C1_1
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
hist(inTrain$SuperPlasticizer)
names(inTrain)
names(training)
hist(training$Superplasticizer)
training$Superplasticizer
library(slidify)
install_github('slidify','ramnathv')
library(devtools)
install_github('slidify','ramnathv')
install_github('slidifyLibrary','ramnathv')
install_github('slidifyLibraries','ramnathv')
library(slidify)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
head(segmentationOriginal$Case)
library(dplyr)
help(dplyr)
help(subset)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
head(training$Case)
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
set.seed(125)
head(training$Cell)
help(segmentationOriginal)
modFit <- train(Class ~ ., method = "rpart", data = training)
modFit
print(modFit$finalModel)
install.packages("rattle")
fancyRpartPlot(modFit$finalModel)
library(rattle)
library(rattle)
fancyRpartPlot(modFit$finalModel)
library(RGtk2)
fancyRpartPlot(modFit$finalModel)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
training <- subset(segmentationOriginal, segmentationOriginal$Case == "Train")
testing <- subset(segmentationOriginal, segmentationOriginal$Case == "Test")
modFit <- train(Class~.,method="rpart",data=training)
set.seed(125)
modFit <- train(Class~.,method="rpart",data=training)
library(rattle)
fancyRpartPlot(modFit$finalModel)
plot(modFit$finalModel, uniform = TRUE, main = "Classification Tree")
text(modFit$finalModel, use.n = TRUE, all=TRUE, cex=0.8)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
model <- train(Area~.,method="rpart",data=olive)
print(model$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
pred <- predict(model, newdata=newdata)
pred
head(olive$Area)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
names(trainSA)
model = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",)
model = train(chd~age+alcohol+obesity+tobacco+typea+ldl,method="glm",family="binomial",data=trainSA)
missClass = function(values,prediction){sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA,predict(model,newdata=testSA))
missClass(testSA$chd,predict(model,newdata=testSA))
missClass(trainSA$chd,predict(model,newdata=trainSA))
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
names(vowel.test)
names(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
model <- train(y~.,method="rf",data=vowel.train)
help(varlmp)
library(caret)
help(varlmp)
varlmp()
??varlmp
varlmp(model)
library(caret)
help(varlmp)
help(varImp)
varImp(model)
list.files()
setwd("D:/Justin/Dropbox/Coursera_MachineLearning")
list.files()
training <- read.csv("pml-training.csv")
names(training)
View(training)
head(training$classe)
help(dummyVars)
nsv <- nearZeroVar(training,saveMetrics=TRUE)
nsv
summary(training$var_yaw_forearm)
help(nearZeroVar)
summary(training$avg_yaw_forearm)
summary(amplitude_yaw_dumbell)
summary(training$amplitude_yaw_dumbell)
summary(training$amplitude_yaw_dumbbell)
training$amplitude_yaw_dumbbell
nsv
summary(training$kurtosis_yaw_dumbbell)
sub <- subset(training,training$var_yaw_forearm==NA)
sub
sub <- subset(training,!is.na(training$var_yaw_forearm))
sub
View(sub)
View(sub$classe)
sub$classe
sub$var_yaw_dumbbell
class(training$classe)
nsv
summary(training$avg_roll_arm)
help(preProcess)
preProc <- preProcess(training[,-160],method="pca",thresh=0.8)
class(training$X)
class(training$var_total_accel_belt)
names(training)
class(training$user_name)
summary(training$user_name)
summary(training$raw_timestamp_part_1)
summary(training$raw_timestamp_part_2)
summary(training$new_window)
summary(training$num_window)
class(training$num_window)
View(training)
training <- training[,c(-1,-2,-3,-4,-5,-6)]
View(training)
names(training)
preProc <- preProcess(training[,-154],method="pca",thresh=0.8)
class(training)
class(training$accel_forearm_x)
testing <- read.csv("pml-testing.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6,-7)]
preProc <- preProcess(training[,-153],method="pca",thresh=0.8)
View(training)
names(training)
training <- read.csv("pml-training.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6,-7)]
class(training$min_roll_arm)
names(training)
class(training$total_accel_arm)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6)]
testing <- testing[,c(-1,-2,-3,-4,-5,-6)]
class(training[,153])
class(training[,154])
for (i in 1:ncol(training)) {
if (class(training[,i]) == "integer") {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(training[,i])}
}
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6)]
testing <- testing[,c(-1,-2,-3,-4,-5,-6)]
for (i in 1:ncol(training)) {
if (class(training[,i]) == "integer") {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(testing[,i])}
}
preProc <- preProcess(training[,-153],method="pca",thresh=0.8)
preProc <- preProcess(training[,-154],method="pca",thresh=0.8)
for (i in 1:ncol(training)) {
class(training[,i])
}
for (i in 1:ncol(training)) {
print(class(training[,i]))
}
class(training$kurtosis_roll_belt)
summary(training$kurtosis_roll_belt)
name(training[,31])
for (i in 1:ncol(training)) {
if (class(training[,i]) == "numeric") {next}
else if(i == ncol(training)) {next}
else {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(testing[,i])
}
}
for (i in 1:ncol(training)) {print(class(training[,i]))}
preProc <- preProcess(training[,-154],method="pca",thresh=0.8)
nsv <- nearZeroVar(training, saveMetrics=TRUE)
nsv
nsv$nzv
training <- training[,-nsv$nzv]
View(training)
class(nsv$nzv)
training <- training[,nsv$nzv]
View(training)
training <- read.csv("pml-training.csv")
testing <- read.csv("pml-testing.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6)]
testing <- testing[,c(-1,-2,-3,-4,-5,-6)]
training <- training[,-nsv$nzv]
training <- training[,-nsv$nzv]
training <- training[,-nsv$nzv]
-nsv$nzv
training <- training[,!nsv$nzv]
!nsv$nzv
logi <- !nsv$nzv
training <- training[,logi]
logi
training <- read.csv("pml-training.csv")
training <- training[,c(-1,-2,-3,-4,-5,-6)]
training <- training[,logi]
testing <- testing[,logi]
for (i in 1:ncol(training)) {
if (class(training[,i]) == "numeric") {next}
else if(i == ncol(training)) {next}
else {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(testing[,i])
}
}
preProc <- preProcess(training[,-95],method="pca",thresh=0.8)
preProc
trainPC <- predict(preProc, training[,-95])
modelFit <- train(training$classe ~ ., method="glm", data = trainPC)
class(training$classe)
data(spam)
names(spam)
modelFit <- train(training$classe ~ ., method="rf", data = trainPC)
help(predict)
predict <- predict(modelFit, newdata=training)
predict <- predict(modelFit, newdata=trainPC)
predict
confusionMatrix(training$classe, predict(modelFit,trainPC))
modelFit
modelFit <- train(training$classe ~ ., method="rf", data = trainPC, prox=TRUE)
predictions <- predict(modelFit, newdata=training)
predictions <- predict(modelFit, newdata=trainPC)
predictions
modelFit <- train(training$classe ~ ., method = "rf", preProcess = "pca", data = training)
confusionMatrix(training$classe, predict(modelFit, training))
modelFit
warnings()
modelFit <- train(training$classe ~ ., method = "glm", preProcess = "pca", data = training)
View(trainPC)
preProc
trainPC
nsv
summary(training$max_roll_belt)
summary(training$var_total_accel_belt)
x <- NULL
x <- c(x, 1)
x
x <- NULL
x <- c(x, 3)
x
training[,3][1]
training[,6][1]
index <- NULL
for (i in 1:ncol(training)) {
if (is.na(training[,i][1])) {
index <- c(index, i)
}
}
index
training <- training[,-index]
testing <- testing[,-index]
for (i in 1:ncol(training)) {
if (class(training[,i]) == "numeric") {next}
else if(i == ncol(training)) {next}
else {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(testing[,i])
}
}
preProc <- preProcess(training[,-54], method="pca", thresh=0.8)
trainPC <- predict(preProc, training[,-54])
modelFit <- train(training$classe ~ ., method="glm", data = trainPC, prox=TRUE)
class(training$classe)
str(training)
modelFit
warnings()
modelFit <- train(training$classe ~ ., method="rf", data = trainPC)
modelFit <- train(training$classe ~ ., method="rpart", data = trainPC)
modelFit
modelFit$finalModel
preProc <- preProcess(training, method="pca", thresh=0.8)
modelFit <- train(training$classe ~ ., method="lm", data = trainPC)
modelFit <- train(training$classe ~ ., method="glm", data = trainPC)
warnings()
modelFit <- train(training$classe ~ ., method = "glm", preProcess = "pca", data = training)
modelFit <- train(training$classe ~ ., method = "glm", data = training)
warnings()
modelFit <- train(training$classe ~ ., method = "lm", data = training)
modelFit <- train(training$classe ~ ., method = "rpart", data = training)
library(rpart)
library(rpart.plot)
install.packages("rpart.plot")
data <- read.csv("pml-training.csv")
testing_2 <- read.csv("pml-testing.csv")
inTrain <- createDataPartition(y=data$classe, p=0.7, list=FALSE)
training <- training[inTrain, ]
testing <- training[-inTrain, ]
inTrain <- createDataPartition(y=data$classe, p=0.7, list=FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
set.seed(208)
inTrain <- createDataPartition(y=data$classe, p=0.7, list=FALSE)
training <- data[inTrain, ]
testing <- data[-inTrain, ]
training <- training[,c(-1,-2,-3,-4,-5,-6)]
testing <- testing[,c(-1,-2,-3,-4,-5,-6)]
nsv <- nearZeroVar(training, saveMetrics=TRUE)
logi <- !nsv$nzv
training <- training[,logi]
testing <- testing[,logi]
## Initialize an empty index variable
index <- NULL
## Loop over all columns and add the column index to the index variable if the first value is NA
for (i in 1:ncol(training)) {
if (is.na(training[,i][1])) {
index <- c(index, i)
}
}
## Subset the datasets to remove all columns that have a first value of NA
training <- training[,-index]
testing <- testing[,-index]
## Convert all columns besides classe to numeric
for (i in 1:ncol(training)) {
if (class(training[,i]) == "numeric") {next}
else if(i == ncol(training)) {next}
else {
training[,i] <- as.numeric(training[,i])
testing[,i] <- as.numeric(testing[,i])
}
}
modelFit <- rpart(classe ~ ., data=training, method="class")
modelFit
predictions <- predict(modelFit, testing$classe)
View(training)
View(testing)
predictions <- predict(modelFit, testing$classe)
modelFit
modelFit$finalModel
predictions <- predict(modelFit, testing$classe, method = "class")
predictions <- predict(modelFit, testing$classe, type = "class")
testing$num_window
predictions <- predict(modelFit, testing$classe, type = "class")
predictions <- predict(modelFit, testing)
confusionMatrix(predictions, testing$classe)
predictions <- predict(modelFit, testing$classe, type = "class")
predictions <- predict(modelFit, testing, type = "class")
confusionMatrix(predictions, testing$classe)
modelFit <- train(classe ~ ., method = "rpart", data = training)
predictions <- predict(modelFit, testing)
confusionMatrix(predictions, testing$classe)
